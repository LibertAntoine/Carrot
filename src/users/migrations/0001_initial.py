# Generated by Django 4.2.19 on 2025-03-01 16:10

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_resized.forms
import users.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "scim_id",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="A unique identifier for a SCIM resource as defined by the service provider.",
                        max_length=254,
                        null=True,
                        unique=True,
                        verbose_name="SCIM ID",
                    ),
                ),
                (
                    "scim_external_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        default=None,
                        help_text="A string that is an identifier for the resource as defined by the provisioning client.",
                        max_length=254,
                        null=True,
                        verbose_name="SCIM External ID",
                    ),
                ),
                (
                    "scim_username",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        default=None,
                        help_text="A service provider's unique identifier for the user",
                        max_length=254,
                        null=True,
                        verbose_name="SCIM Username",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        max_length=40,
                        unique=True,
                        validators=[django.core.validators.MinLengthValidator(4)],
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("creation_date", models.DateTimeField(auto_now_add=True)),
                ("last_update", models.DateTimeField(auto_now=True)),
                (
                    "profile_picture",
                    django_resized.forms.ResizedImageField(
                        blank=True,
                        crop=["middle", "center"],
                        force_format="PNG",
                        keep_meta=True,
                        null=True,
                        quality=-1,
                        scale=None,
                        size=(300, 300),
                        upload_to=users.models.generate_profile_picture_path,
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=150, unique=True, verbose_name="name"),
                ),
                (
                    "scim_id",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="A unique identifier for a SCIM resource as defined by the service provider.",
                        max_length=254,
                        null=True,
                        unique=True,
                        verbose_name="SCIM ID",
                    ),
                ),
                (
                    "scim_external_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        default=None,
                        help_text="A string that is an identifier for the resource as defined by the provisioning client.",
                        max_length=254,
                        null=True,
                        verbose_name="SCIM External ID",
                    ),
                ),
                (
                    "scim_display_name",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        default=None,
                        help_text="A human-readable name for the Group.",
                        max_length=254,
                        null=True,
                        verbose_name="SCIM Display Name",
                    ),
                ),
                (
                    "permissions",
                    models.ManyToManyField(
                        blank=True,
                        related_name="custom_group_set",
                        to="auth.permission",
                        verbose_name="permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, unique=True)),
                ("description", models.TextField(blank=True, max_length=500)),
                ("creation_date", models.DateTimeField(auto_now_add=True)),
                ("last_update", models.DateTimeField(auto_now=True)),
                (
                    "create_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="roles_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True, related_name="roles", to="users.group"
                    ),
                ),
                (
                    "users",
                    models.ManyToManyField(
                        blank=True, related_name="roles", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user_set",
                to="users.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
    ]
