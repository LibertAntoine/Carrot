"""
Django settings for jumper project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from datetime import timedelta
import dotenv
import logging
import os
from pathlib import Path
import sys
from corsheaders.defaults import default_headers

dotenv.load_dotenv()

###############
# CORE SETTINGS
###############

DEFAULT_JUMPER_MAX_VERSION = "0.1"

INSTALLED_APPS = [
    "auths",
    "users",
    "actions",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "simple_history",
    "django_filters",
    "rest_framework",
    "corsheaders",
    "drf_yasg",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "django_user_agents",
    "django_rest_passwordreset",
    "mozilla_django_oidc",
    "django_scim",
    "django_group_model",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.http.ConditionalGetMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_user_agents.middleware.UserAgentMiddleware",
    "simple_history.middleware.HistoryRequestMiddleware",
]

REST_FRAMEWORK = {
    # DEFAULT_AUTHENTICATION_CLASSES define in Authentication section
}

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
ROOT_URLCONF = "jumper.urls"

JUMPER_HOST = os.environ.get("JUMPER_HOST", "http://localhost")
JUMPER_PORT = os.environ.get("JUMPER_PORT", 9630)

# SECURITY WARNING: keep the secret keys used in production secret!
SECRET_KEY = os.environ.get(
    "DJANGO_SECRET_KEY",
    "django-insecure-w)t6yx_+6a8tw!61gh-7c0w7&y32o=(r)cxi=jpl*z5*95b%6v",
)
SIGNING_KEY_FILE = os.environ.get(
    "SIGNING_KEY_FILE", f"{BASE_DIR}/jumper/test_private_key.pem"
)
VERIFYING_KEY_FILE = os.environ.get(
    "VERIFYING_KEY_FILE", f"{BASE_DIR}/jumper/test_public_key.pem"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "False").lower() in ("True", "1")

ADMIN_USERNAME = os.environ.get("ADMIN_USERNAME", "admin")
ADMIN_EMAIL = os.environ.get("ADMIN_EMAIL", "admin@mail.com")
ADMIN_PASSWORD = os.environ.get("ADMIN_PASSWORD", "admin")
ADMIN_GROUP = os.environ.get("ADMIN_GROUP", None)

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "jumper.wsgi.application"

##########
# STORAGES
##########

# Data Storage
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ["POSTGRES_DB"],
        "USER": os.environ["POSTGRES_USER"],
        "PASSWORD": os.environ["POSTGRES_PASSWORD"],
        "HOST": os.environ["POSTGRES_HOST"],
        "PORT": os.environ.get("POSTGRES_PORT", "5432"),
    }
}

# Object Storage
DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
AWS_ACCESS_KEY_ID = os.environ["S3_ACCESS_KEY_ID"]
AWS_SECRET_ACCESS_KEY = os.environ["S3_SECRET_ACCESS_KEY"]
AWS_STORAGE_BUCKET_NAME = os.environ["S3_BUCKET_NAME"]
AWS_S3_ENDPOINT_URL = f"http://{os.environ['S3_ENDPOINT_HOST']}:{os.environ.get('S3_ENDPOINT_PORT', '9000')}"
AWS_S3_SECURE_URLS = False
AWS_S3_USE_SSL = False

################
# AUTHENTICATION
################

# Session Authentication
JWT_ENABLED = False if os.environ.get("JWT_ENABLED") == "False" else True
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(
        minutes=os.environ.get("ACCESS_TOKEN_LIFETIME", 1440)
    ),
    "REFRESH_TOKEN_LIFETIME": timedelta(
        minutes=os.environ.get("REFRESH_TOKEN_LIFETIME", 43200)
    ),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": "RS256",
    "SIGNING_KEY": open(SIGNING_KEY_FILE).read(),
    "VERIFYING_KEY": open(VERIFYING_KEY_FILE).read(),
    "AUTH_COOKIE_DOMAIN": None,
    "AUTH_COOKIE": "access_token",
    "AUTH_COOKIE_REFRESH": "refresh_token",
    "AUTH_COOKIE_SECURE": True,
    "AUTH_COOKIE_HTTP_ONLY": False,
    "AUTH_COOKIE_PATH": "/",
    "AUTH_COOKIE_SAMESITE": "None",
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# OpenID Connect Authentication
OIDC_ENABLED = True if os.environ.get("OIDC_ENABLED") == "True" else False
OIDC_RP_CLIENT_ID = os.environ.get("OIDC_RP_CLIENT_ID")
OIDC_RP_CLIENT_SECRET = os.environ.get("OIDC_RP_CLIENT_SECRET")
OIDC_OP_AUTHORIZATION_ENDPOINT = os.environ.get("OIDC_OP_AUTHORIZATION_ENDPOINT")
OIDC_OP_TOKEN_ENDPOINT = os.environ.get("OIDC_OP_TOKEN_ENDPOINT")
OIDC_OP_USER_ENDPOINT = os.environ.get("OIDC_OP_USER_ENDPOINT")
OIDC_OP_JWKS_ENDPOINT = os.environ.get("OIDC_OP_JWKS_ENDPOINT")
OIDC_OP_LOGOUT_ENDPOINT = os.environ.get("OIDC_OP_LOGOUT_ENDPOINT")
OIDC_OP_LOGOUT_URL_METHOD = "users.auth.logout"
ALLOW_LOGOUT_GET_METHOD = True
OIDC_RP_SIGN_ALGO = os.environ.get("OIDC_RP_SIGN_ALGO", "HS256")
OIDC_PROVIDER_NAME = os.environ.get("OIDC_PROVIDER_NAME", "OIDC")

OIDC_RP_SCOPES = os.environ.get("OIDC_RP_SCOPES", "openid email profile")
OIDC_USERNAME_ATTRIBUTE = os.environ.get(
    "OIDC_USERNAME_ATTRIBUTE", "preferred_username"
)
OIDC_AVATAR_ATTRIBUTE = os.environ.get("OIDC_AVATAR_ATTRIBUTE", "avatar")

LOGIN_URL = os.environ.get("LOGIN_URL", "oidc_authentication_init")
LOGIN_REDIRECT_URL = os.environ.get("LOGIN_REDIRECT_URL")
LOGOUT_REDIRECT_URL = os.environ.get("LOGOUT_REDIRECT_URL")
LOGIN_REDIRECT_URL_FAILURE = os.environ.get("LOGIN_REDIRECT_URL_FAILURE")

# SCIM Authentication
SCIM_ENABLED = True if os.environ.get("SCIM_ENABLED") == "True" else False
SCIM_ALLOW_USER_DELETION = (
    False if os.environ.get("SCIM_ALLOW_USER_DELETION") == "False" else True
)
SCIM_ALLOW_USER_CREATION_CONFLIT = (
    True if os.environ.get("SCIM_ALLOW_USER_CREATION_CONFLIT") == "True" else False
)
SCIM_BEARER_TOKEN = os.environ.get("SCIM_BEARER_TOKEN", None)


SCIM_SERVICE_PROVIDER = {
    "USER_ADAPTER": "users.scim.SCIMUser",
    "GROUP_ADAPTER": "users.scim.SCIMGroup",
    "GROUP_MODEL": "users.models.Group",
    "GET_IS_AUTHENTICATED_PREDICATE": lambda _: True,
    "AUTH_CHECK_MIDDLEWARE": "users.scim.SCIMAuthCheckMiddleware",
    "SCHEME": "http",
    "NETLOC": f"${JUMPER_HOST}:{JUMPER_PORT}",
    "AUTHENTICATION_SCHEMES": [
        {
            "name": "Bearer Token",
            "description": "Authentication scheme using the OAuth Bearer Token standard",
            "specUri": "http://www.rfc-editor.org/info/rfc6750",
            "type": "oauthbearertoken",
            "primary": True,
        }
    ],
    "WWW_AUTHENTICATE_HEADER": 'Basic realm="Jumper SCIM2.0"',
}

REST_FRAMEWORK["DEFAULT_AUTHENTICATION_CLASSES"] = [
    "auths.jwt.JwtCookiesAuthentication",
]

if OIDC_ENABLED:
    REST_FRAMEWORK["DEFAULT_AUTHENTICATION_CLASSES"].append(
        "mozilla_django_oidc.contrib.drf.OIDCAuthentication"
    )

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
]

if OIDC_ENABLED:
    AUTHENTICATION_BACKENDS.insert(0, "auths.oidc.CustomOIDCAuthenticationBackend")


#########
# LOGGING
#########

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{asctime} {levelname} {module} {message} {exc_info}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
        }
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "propagate": False,
        },
        "celery": {
            "handlers": ["console"],
            "propagate": False,
        },
    },
}

if os.environ.get("DJANGO_LOG_FILE"):
    LOGGING["loggers"]["django"]["handlers"].append("django_file")
    LOGGING["handlers"]["django_file"] = {
        "level": os.getenv("DJANGO_LOG_FILE_LEVEL", "INFO"),
        "class": "logging.FileHandler",
        "filename": os.getenv("DJANGO_LOG_FILE"),
        "formatter": "verbose",
    }

    def handle_uncaught_exception(exc_type, exc_value, exc_traceback):
        logger = logging.getLogger("django")
        logger.error(
            "Uncaught exception", exc_info=(exc_type, exc_value, exc_traceback)
        )

    sys.excepthook = handle_uncaught_exception

if os.environ.get("CELERY_LOG_FILE"):
    LOGGING["loggers"]["celery"]["handlers"].append("celery_file")
    LOGGING["handlers"]["celery_file"] = {
        "level": os.getenv("CELERY_LOG_FILE_LEVEL", "INFO"),
        "class": "logging.FileHandler",
        "filename": os.getenv("CELERY_LOG_FILE"),
        "formatter": "verbose",
    }

    def handle_uncaught_exception(exc_type, exc_value, exc_traceback):
        logger = logging.getLogger("celery")
        logger.error(
            "Uncaught exception", exc_info=(exc_type, exc_value, exc_traceback)
        )

    sys.excepthook = handle_uncaught_exception

###############
# EMAILS - SMTP
###############

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.environ.get("EMAIL_HOST", None)
EMAIL_PORT = os.environ.get("EMAIL_PORT", 25)
EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS") == "True"
DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL", "noreply@something.com")
DJANGO_REST_PASSWORDRESET_NO_INFORMATION_LEAKAGE = True

####################
# FRONTEND - UPDATES
####################

ALLOW_FRONTEND_UPDATES = os.environ.get("ALLOW_FRONTEND_UPDATES", "True") == "True"
JUMPER_REPOSITORY_URL = os.environ.get(
    "JUMPER_REPOSITORY_URL", "https://api.github.com/repos/LibertAntoine/Jumper"
)
MAX_ALLOWED_VERSION = os.environ.get("MAX_ALLOWED_VERSION", DEFAULT_JUMPER_MAX_VERSION)

########
# OTHERS
########

ALLOWED_HOSTS = ["*"]
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = list(default_headers) + [
    "x-client-agent",
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

AUTH_USER_MODEL = "users.User"
AUTH_GROUP_MODEL = "users.Group"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = "static/"

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

DEFAULT_PAGE_SIZE = 25
DEFAULT_MAX_PAGE_SIZE = 1000
DEFAULT_PAGE_SIZE_QUERY_PARAM = "limit"
